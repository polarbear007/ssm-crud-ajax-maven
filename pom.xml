<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>cn.itcast</groupId>
  <artifactId>ssm-crud-ajax-maven</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <properties>
		<spring.version>4.3.18.RELEASE</spring.version>
		<mybatis.version>3.4.2</mybatis.version>
		<mysql.driver.version>8.0.12</mysql.driver.version>
		<!-- <mybatisPlus.version>3.0-RELEASE</mybatisPlus.version> -->
		 <pageHelper.version>5.1.8</pageHelper.version> 
		<!-- <tk.mapper.version>4.1.0</tk.mapper.version> --> 
	</properties>

	<dependencies>
		<!-- 添加Spring支持 -->
		<!-- 核心包 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- pring IOC的基础实现，包含访问配置文件、创建和管理bean等 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.5.1</version>
		</dependency>

		<!-- springmvc 需要的一些jar 包 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.3</version>
		</dependency>
		
		<!-- 添加这个jar 包以后，可以使用 @requestBody 和 @responseBody 自动解析和封装json 数据 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.8.11.1</version>
		</dependency>

		<!-- springmvc 默认使用jstl 标签 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
		<!-- 添加一下 hibernate-validator 框架 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.2.0.Final</version>
		</dependency>

		<!-- mybatis 核心包 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>

		<!-- mybatis 与 spring 的整合包 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>

		<!-- PageHelper 需要的 jar 包 -->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper</artifactId>
			<version>${pageHelper.version}</version>
		</dependency>
		

		<!-- 通用Mapper 的jar 包   使用二级缓存 + hibernate-validator 总是出错，干脆就不用了
		<dependency>
			<groupId>tk.mybatis</groupId>
			<artifactId>mapper</artifactId>
			<version>${tk.mapper.version}</version>
		</dependency> 
		-->
		
		<!-- 如果我们想要使用 mybatisPlus 的话，那么不需要添加
				 mybatis 与 spring 的整合包
				 不需要明确指定 mybatis 版本=====》 指定了容易出现版本问题
		 <dependency>
		    <groupId>com.baomidou</groupId>
		    <artifactId>mybatis-plus</artifactId>
		    <version>${mybatisPlus.version}</version>
		</dependency>
		 -->

		<!-- 配置连接mysql 的驱动包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.driver.version}</version>
		</dependency>

		<!-- mybatis 依赖包 -->
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm</artifactId>
			<version>3.3.1</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.3</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/cglib/cglib -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
		</dependency>

		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.11.0.GA</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.0</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache -->
		<!-- 如果我们要使用ehcache 作为mybatis 的二级缓存的话，那就需要配置这个整合包-->
		 <dependency> 
		 	<groupId>org.mybatis.caches</groupId> 
			<artifactId>mybatis-ehcache</artifactId> 
			<version>1.0.2</version> 
		</dependency> 
		

		<!-- 我是习惯在 eclipse 工程中添加 junit jar 包，然后直接在 eclipse 上面测试，不喜欢通过 maven 来进行测试-->
		 <dependency> 
			<groupId>junit</groupId> 
			<artifactId>junit</artifactId> 
			<version>4.12</version> 
			<scope>test</scope> 
		</dependency> 
		
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.1</version>
			<scope>provided</scope>
		</dependency>
	
	
	</dependencies> 
<!-- 添加comcat 插件 和  jdk 插件 -->
	<build>
		<plugins>
	<!-- 添加了这个tomcat 插件以后，我们还是可以直接使用eclipse 上面创建的tomcat 服务器执行
				 而且不需要在 buildpath 里面添加  serverRuntime jar 包
				 当然，我们也可以使用 maven 命令： tomcat7:run   来执行我们的项目
			 --> 
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<!-- 设置项目名为 /
					<path>/</path>
 					--> 
					<!-- 设置端口号为 8080， 默认就是 8080； 如果我们想要设置成80，可以改80 -->
					<port>8080</port>
					<!-- 可以解决get请求的中文乱码问题 post 请求的中文乱码问题也解决了 -->
					<uriEncoding>utf-8</uriEncoding>
				</configuration>
			</plugin>

			<!-- 设置 jdk 版本为 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>